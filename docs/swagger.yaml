basePath: /api
definitions:
  controllers.CreateAndUpdateClientRequest:
    properties:
      name:
        type: string
      phone:
        type: string
    required:
    - name
    type: object
  controllers.CreateAndUpdateProductRequest:
    properties:
      active:
        type: boolean
      amount_available:
        type: integer
      code:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      price_promotion:
        type: number
      promotion:
        type: boolean
    required:
    - code
    - name
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.UpdateUserPasswordRequest:
    properties:
      confirm:
        type: string
      password:
        type: string
    required:
    - confirm
    - password
    type: object
  controllers.UpdateUserRequest:
    properties:
      name:
        type: string
      responsability:
        type: string
    required:
    - name
    - responsability
    type: object
  models.Client:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  models.Payment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      active:
        type: boolean
      amount_available:
        type: integer
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      price_promotion:
        type: number
      promotion:
        type: boolean
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      responsability:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  title: API documentation
  version: 1.0.0
paths:
  /clients:
    get:
      description: Get all clients
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Client'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: List clients
      tags:
      - Clients
    post:
      consumes:
      - application/json
      description: Create new Client based on body parameters
      parameters:
      - description: Client Data
        in: body
        name: Client
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateAndUpdateClientRequest'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Add a client
      tags:
      - Clients
  /clients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Delete a client
      tags:
      - Clients
    get:
      description: Get client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Client'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Get client
      tags:
      - Clients
    patch:
      consumes:
      - application/json
      description: Update an existing client based on ID and body parameters
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Client Data
        in: body
        name: Client
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateAndUpdateClientRequest'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Update a client
      tags:
      - Clients
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Login
      tags:
      - Users
  /logout:
    post:
      description: Logout
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Logout
      tags:
      - Users
  /payments:
    get:
      description: Get all payments
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: List payments
      tags:
      - Payments
  /products:
    get:
      description: Get all products
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: List products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create new Product based on body parameters
      parameters:
      - description: Product Data
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateAndUpdateProductRequest'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Add a product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing Product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Delete a product
      tags:
      - Products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Get product
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update an existing product based on ID and body parameters
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Data
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateAndUpdateProductRequest'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Update a product
      tags:
      - Products
  /users/avatar:
    patch:
      description: Update logged user avatar
      parameters:
      - description: User avatar
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Update avatar
      tags:
      - Users
  /users/password:
    patch:
      description: Update logged user password
      parameters:
      - description: User password
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserPasswordRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Update password
      tags:
      - Users
  /users/profile:
    get:
      description: Get logged user data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Get user
      tags:
      - Users
    patch:
      description: Update logged user data
      parameters:
      - description: User Data
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Update user
      tags:
      - Users
swagger: "2.0"
